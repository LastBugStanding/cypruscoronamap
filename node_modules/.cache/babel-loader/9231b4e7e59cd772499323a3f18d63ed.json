{"ast":null,"code":"var _jsxFileName = \"/home/lastbug/Desktop/Corona-map/miscs/coronamap/covid-19-react-master/src/pages/Global.js\";\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport Loader from '../component/Loader';\nimport CountrywiseLine from '../component/CountrywiseLine';\nimport ServerDown from './ServerDown';\nimport { optionPropertiesCountrywise, optionPropertiesCountrywiseInfectionRate, lineDataCountrywiseInfectionRate, lineDataCountrywise, colorsCountrywise, lineDataCountrywiseMortalityRate, lineDataCountrywiseFatalityRate, optionPropertiesCountrywiseMortalityRate, optionPropertiesCountrywiseFatalityRate } from '../data/data';\nimport Async from 'react-async';\nexport default function Global() {\n  const loadUsers = () => // fetch(\"http://192.168.1.157:5000/readings/countrywise\")\n  fetch(\"https://raw.githubusercontent.com/LastBugStanding/covid/master/statewise.json\").then(res => res.ok ? res : Promise.reject(res)).then(res => res.json());\n\n  return /*#__PURE__*/React.createElement(Async, {\n    promiseFn: loadUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, ({\n    data,\n    err,\n    isLoading\n  }) => {\n    if (isLoading) return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 44\n      }\n    });\n    if (err) return /*#__PURE__*/React.createElement(ServerDown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 37\n      }\n    });\n    if (data) // for country wise graphs\n      lineDataCountrywise.labels = [...Array(data.counts[\"China\"].length).keys()];\n    lineDataCountrywise.datasets = []; // console.log(data.counts);\n\n    var countries = [\"India\", \"China\", \"Spain\", \"Italy\", \"US\"]; // var countries = Object.keys(data.counts);\n\n    countries.forEach((item, index) => {\n      lineDataCountrywise.datasets.push({\n        label: item,\n        legendText: item,\n        fill: false,\n        borderColor: colorsCountrywise[index],\n        pointBackgroundColor: colorsCountrywise[index],\n        pointRadius: 2,\n        data: data.counts[item],\n        spanGaps: false,\n        lineTension: 0.4\n      });\n    });\n    lineDataCountrywiseInfectionRate.labels = [...Array(data.counts[\"China\"].length).keys()];\n    lineDataCountrywiseMortalityRate.labels = [...Array(data.counts[\"China\"].length).keys()];\n    lineDataCountrywiseFatalityRate.labels = [...Array(data.counts[\"China\"].length).keys()];\n    lineDataCountrywiseInfectionRate.datasets = [];\n    lineDataCountrywiseMortalityRate.datasets = [];\n    lineDataCountrywiseFatalityRate.datasets = []; // console.log(data.counts);\n\n    var mortality_rate_max = 0; // var countries = Object.keys(data.counts);\n\n    countries.forEach((item, index) => {\n      lineDataCountrywiseInfectionRate.datasets.push({\n        label: item,\n        legendText: item,\n        fill: false,\n        borderColor: colorsCountrywise[index],\n        pointBackgroundColor: colorsCountrywise[index],\n        pointRadius: 2,\n        data: data.infection_rate[item],\n        spanGaps: false,\n        lineTension: 0.4\n      });\n    });\n    countries.forEach((item, index) => {\n      lineDataCountrywiseMortalityRate.datasets.push({\n        label: item,\n        legendText: item,\n        fill: false,\n        borderColor: colorsCountrywise[index],\n        pointBackgroundColor: colorsCountrywise[index],\n        pointRadius: 2,\n        data: data.mortality_rate[item],\n        spanGaps: false,\n        lineTension: 0.4\n      });\n      var maxi = Math.max(...data.mortality_rate[item]);\n\n      if (maxi > mortality_rate_max) {\n        mortality_rate_max = maxi; // optionPropertiesCountrywiseMortalityRate.scales.yAxes[0].ticks.max = maxi * 0.1;\n      }\n    });\n    countries.forEach((item, index) => {\n      lineDataCountrywiseFatalityRate.datasets.push({\n        label: item,\n        legendText: item,\n        fill: false,\n        borderColor: colorsCountrywise[index],\n        pointBackgroundColor: colorsCountrywise[index],\n        pointRadius: 2,\n        data: data.fatality_rate[item],\n        spanGaps: false,\n        lineTension: 0.4\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 28\n      }\n    }, \"Analytics Between Countries\"), /*#__PURE__*/React.createElement(\"meta\", {\n      name: \"description\",\n      content: \"Comparision between India, China, Itlay, USA and Spain\",\n      \"data-react-helmet\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"meta\", {\n      name: \"theme-color\",\n      content: \"#008f68\",\n      \"data-react-helmet\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-warning borderless\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"alert-heading font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, \"Thoughtprocess\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, \"For any kind of Data Analysis on Covid-19 we have first to bring the data points of different countries to the same origin. We cannot derive anything meaningful if we just plot the confirmed infections at their respective dates due to different origins of outbreak. So we fixed the origins of all countries to Day 0, which in our case represents the day when each country has surpassed 500 cases.\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"element-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, \"Countrywise Spread\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-box-tp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CountrywiseLine, {\n      values: lineDataCountrywise,\n      option: optionPropertiesCountrywise,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-warning borderless\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, \"This gives us an idea of how the virus has spread among different countries. But this is not the best indicator yet due to difference in populations and population densities among the countries.\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"element-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, \"Countrywise Infection Rate\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-box-tp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CountrywiseLine, {\n      values: lineDataCountrywiseInfectionRate,\n      option: optionPropertiesCountrywiseInfectionRate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-warning borderless\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, \"This numbers actually allows comparing how well the different countries are doing in their corona countermeasures, regardless of the population size and density.\"), /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"alert-heading font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, \"An infection rate of 1.0 means no new infections.\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"element-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }\n    }, \"Countrywise Fatality Rate\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-box-tp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CountrywiseLine, {\n      values: lineDataCountrywiseFatalityRate,\n      option: optionPropertiesCountrywiseFatalityRate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-warning borderless\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    }, \"However, confirmed does not mean the same between different countries and even in the same country at different time points of the epidemic. This is due to the sampling bias induced by the limited amount of corona test kits. With ongoing spread, we hit limits on test-kit and health-system capacities and the focus shifts to testing severe cases only. This in turn pushes the fatality rate. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 94\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 99\n      }\n    }), \"A significant increase of the fatality rate indicates that\", /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 33\n      }\n    }, \" the confirmed count is being under-estimated.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 33\n      }\n    }, \" the health-system capacites being exhausted.  \")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"element-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 29\n      }\n    }, \"Countrywise Mortality Rate\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"element-box-tp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CountrywiseLine, {\n      values: lineDataCountrywiseMortalityRate,\n      option: optionPropertiesCountrywiseMortalityRate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-warning borderless\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    }, \"In contrast to the fatality rate, the mortality rate above is shown in dead per million inhabitants. This makes it independant of whether the confirmed count is estimated correctly. In most cases both will be correlated. However, the mortality rate is a better indicator of the influence of the pandepic on a countries society and economy - especially when the health-system is exhausted.\")))));\n  });\n}","map":{"version":3,"sources":["/home/lastbug/Desktop/Corona-map/miscs/coronamap/covid-19-react-master/src/pages/Global.js"],"names":["React","Helmet","Loader","CountrywiseLine","ServerDown","optionPropertiesCountrywise","optionPropertiesCountrywiseInfectionRate","lineDataCountrywiseInfectionRate","lineDataCountrywise","colorsCountrywise","lineDataCountrywiseMortalityRate","lineDataCountrywiseFatalityRate","optionPropertiesCountrywiseMortalityRate","optionPropertiesCountrywiseFatalityRate","Async","Global","loadUsers","fetch","then","res","ok","Promise","reject","json","data","err","isLoading","labels","Array","counts","length","keys","datasets","countries","forEach","item","index","push","label","legendText","fill","borderColor","pointBackgroundColor","pointRadius","spanGaps","lineTension","mortality_rate_max","infection_rate","mortality_rate","maxi","Math","max","fatality_rate"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Helmet} from 'react-helmet'\n\nimport Loader  from '../component/Loader'\n\nimport CountrywiseLine  from '../component/CountrywiseLine'\nimport ServerDown  from './ServerDown'\n\nimport {optionPropertiesCountrywise,optionPropertiesCountrywiseInfectionRate,\n    lineDataCountrywiseInfectionRate, lineDataCountrywise, colorsCountrywise,\n    lineDataCountrywiseMortalityRate, lineDataCountrywiseFatalityRate,\n    optionPropertiesCountrywiseMortalityRate, optionPropertiesCountrywiseFatalityRate} from '../data/data'\n\nimport Async from 'react-async';\n\nexport default function Global() {\n\n    const loadUsers = () =>\n    // fetch(\"http://192.168.1.157:5000/readings/countrywise\")\n    fetch(\"https://raw.githubusercontent.com/LastBugStanding/covid/master/statewise.json\")\n    .then(res => (res.ok ? res : Promise.reject(res)))\n    .then(res => res.json())\n\n    return (\n        <Async promiseFn={loadUsers} >\n                {({ data, err, isLoading }) => {\n                    if (isLoading) return (<Loader/>)\n                    if (err) return <ServerDown/>\n                    if (data)\n                      // for country wise graphs\n                      lineDataCountrywise.labels = [...Array(data.counts[\"China\"].length).keys()];\n                      lineDataCountrywise.datasets = [];\n                     // console.log(data.counts);\n                     var countries = [\"India\", \"China\", \"Spain\", \"Italy\", \"US\"];\n                      // var countries = Object.keys(data.counts);\n                      countries.forEach((item, index) =>{\n                          lineDataCountrywise.datasets.push({\n                              label: item,\n                              legendText: item,\n                              fill: false,\n                              borderColor: colorsCountrywise[index],\n                              pointBackgroundColor: colorsCountrywise[index],\n                              pointRadius: 2,\n                              data: data.counts[item],\n                              spanGaps: false,\n                              lineTension: 0.4\n                          })\n                      });\n\n                      lineDataCountrywiseInfectionRate.labels = [...Array(data.counts[\"China\"].length).keys()];\n                      lineDataCountrywiseMortalityRate.labels = [...Array(data.counts[\"China\"].length).keys()];\n                      lineDataCountrywiseFatalityRate.labels = [...Array(data.counts[\"China\"].length).keys()];\n                      lineDataCountrywiseInfectionRate.datasets = [];\n                      lineDataCountrywiseMortalityRate.datasets = [];\n                      lineDataCountrywiseFatalityRate.datasets = [];\n                     // console.log(data.counts);\n                      var mortality_rate_max = 0;\n                      // var countries = Object.keys(data.counts);\n\n                      countries.forEach((item, index) =>{\n                          lineDataCountrywiseInfectionRate.datasets.push({\n                              label: item,\n                              legendText: item,\n                              fill: false,\n                              borderColor: colorsCountrywise[index],\n                              pointBackgroundColor: colorsCountrywise[index],\n                              pointRadius: 2,\n                              data: data.infection_rate[item],\n                              spanGaps: false,\n                              lineTension: 0.4\n                          })\n                      });\n\n                      countries.forEach((item, index) =>{\n                          lineDataCountrywiseMortalityRate.datasets.push({\n                              label: item,\n                              legendText: item,\n                              fill: false,\n                              borderColor: colorsCountrywise[index],\n                              pointBackgroundColor: colorsCountrywise[index],\n                              pointRadius: 2,\n                              data: data.mortality_rate[item],\n                              spanGaps: false,\n                              lineTension: 0.4\n                          })\n                          var maxi = Math.max(...data.mortality_rate[item]);\n                          if(maxi > mortality_rate_max){\n                            mortality_rate_max = maxi;\n                            // optionPropertiesCountrywiseMortalityRate.scales.yAxes[0].ticks.max = maxi * 0.1;\n                          }\n                      });\n\n                      countries.forEach((item, index) =>{\n                          lineDataCountrywiseFatalityRate.datasets.push({\n                              label: item,\n                              legendText: item,\n                              fill: false,\n                              borderColor: colorsCountrywise[index],\n                              pointBackgroundColor: colorsCountrywise[index],\n                              pointRadius: 2,\n                              data: data.fatality_rate[item],\n                              spanGaps: false,\n                              lineTension: 0.4\n                          })\n                      });\n\n                    return(\n                        <>\n                          <Helmet>\n                           <title>Analytics Between Countries</title>\n\n                            <meta name=\"description\" content=\"Comparision between India, China, Itlay, USA and Spain\"  data-react-helmet=\"true\" />\n                            <meta name=\"theme-color\" content=\"#008f68\"  data-react-helmet=\"true\" />\n\n                          </Helmet>\n                        <div className=\"row\">\n                        <div className=\"col-lg-12\">\n                      <div className=\"alert alert-warning borderless\">\n                        <h6 className=\"alert-heading font-weight-bold\">\n                            Thoughtprocess\n                        </h6>\n                        <p>\n                          For any kind of Data Analysis on Covid-19 we have first to bring the data points of\n                           different countries to the same origin. We cannot derive anything meaningful if\n                            we just plot the confirmed infections at their respective dates due to different\n                            origins of outbreak. So we fixed the origins of all countries to Day 0, which in our\n                             case represents the day when each country has surpassed 500 cases.\n                        </p>\n                      </div>\n                    </div>\n                        <div className=\"col-sm-6\">\n                            <div className=\"element-wrapper\">\n                            <h6 className=\"element-header\">\n                                Countrywise Spread\n                            </h6>\n                            <div className=\"element-box-tp\">\n                                <CountrywiseLine\n                                values={lineDataCountrywise}\n                                option={optionPropertiesCountrywise}\n                                />\n                            </div>\n                            </div>\n                            <div className=\"alert alert-warning borderless\">\n                        <p>\n                          This gives us an idea of how the virus has spread among different countries.\n                          But this is not the best indicator yet due to difference in populations and\n                          population densities among the countries.\n                        </p>\n                      </div>\n                        </div>\n\n                        <div className=\"col-sm-6\">\n\n                            <div className=\"element-wrapper\">\n                            <h6 className=\"element-header\">\n                                Countrywise Infection Rate\n                            </h6>\n                            <div className=\"element-box-tp\">\n                                <CountrywiseLine\n                                values={lineDataCountrywiseInfectionRate}\n                                option={optionPropertiesCountrywiseInfectionRate}\n                                />\n                            </div>\n                            </div>\n<div className=\"alert alert-warning borderless\">\n                        <p>\n                          This numbers actually allows comparing how well the different countries are doing\n                           in their corona countermeasures, regardless of the population size and density.\n                        </p>\n                        <h6 className=\"alert-heading font-weight-bold\">\n                            An infection rate of 1.0 means no new infections.\n                        </h6>\n                      </div>\n                        </div>\n\n                        <div className=\"col-sm-6\">\n\n                            <div className=\"element-wrapper\">\n                            <h6 className=\"element-header\">\n                                Countrywise Fatality Rate\n                            </h6>\n                            <div className=\"element-box-tp\">\n                                <CountrywiseLine\n                                values={lineDataCountrywiseFatalityRate}\n                                option={optionPropertiesCountrywiseFatalityRate}\n                                />\n                            </div>\n                            </div>\n                            <div className=\"alert alert-warning borderless\">\n                                <p>\n                                However, confirmed does not mean the same between different countries and even\n                                 in the same country at different time points of the epidemic. This is due to the\n                                 sampling bias induced by the limited amount of corona test kits. With ongoing spread,\n                                  we hit limits on test-kit and health-system capacities and the focus shifts to testing\n                                   severe cases only. This in turn pushes the fatality rate. <br/><br/>\n\n                                  A significant increase of the fatality rate indicates that\n                                <li> the confirmed count is being under-estimated.</li>\n                                <li> the health-system capacites being exhausted.  </li>\n                                </p>\n                                </div>\n                        </div>\n\n                        <div className=\"col-sm-6\">\n                            <div className=\"element-wrapper\">\n                            <h6 className=\"element-header\">\n                                Countrywise Mortality Rate\n                            </h6>\n                            <div className=\"element-box-tp\">\n                                <CountrywiseLine\n                                values={lineDataCountrywiseMortalityRate}\n                                option={optionPropertiesCountrywiseMortalityRate}\n                                />\n                            </div>\n                            </div>\n                            <div className=\"alert alert-warning borderless\">\n                            <p>\n                              In contrast to the fatality rate, the mortality rate above is shown in dead per million inhabitants. This makes it independant of whether the confirmed count is estimated correctly. In most cases both will be correlated. However, the mortality rate is a better indicator of the influence of the pandepic on a countries society and economy - especially when the health-system is exhausted.\n                            </p>\n                            </div>\n                        </div>\n\n\n                        </div>\n                        </>\n                    )\n                }}\n        </Async>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}